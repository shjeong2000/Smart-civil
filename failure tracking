class Beam:
    def __init__(self, length, width, height):
        self.length = length  # 보의 길이 (m)
        self.width = width / 1000  # 보의 너비 (mm에서 m으로 변환)
        self.height = height / 1000  # 보의 높이 (mm에서 m으로 변환)
        self.I = (self.width * self.height**3) / 12  # 단면적 모멘트 관성
        self.beam_type = "단순보"  # 보의 종류를 단순보로 고정
        self.origin = (0, 0, 0)  # 좌측면 정중앙을 원점으로 설정

    def display_properties(self):
        print(f"보의 길이: {self.length:.4f} m (x축 방향)")
        print(f"보의 너비: {self.width:.4f} m (z축 방향)")
        print(f"보의 높이: {self.height:.4f} m (y축 방향)")
        print(f"단면적 모멘트 관성: {self.I:.4f} m^4")
        print(f"보의 종류: {self.beam_type}")


class Support:
    def __init__(self, beam):
        self.pin_position = None  # 핀 위치
        self.roller_position = None  # 롤러 위치
        self.beam = beam  # 보 객체 참조
        self.reactions = {
            "pin": {"vertical": 0},
            "roller": {"vertical": 0}
        }

    def set_pin(self, x_position):
        self.pin_position = (x_position, -self.beam.height / 2, 0)

    def set_roller(self, x_position):
        self.roller_position = (x_position, -self.beam.height / 2, 0)

    def calculate_reactions(self, loads):
        total_vertical_load = sum(magnitude for _, magnitude in loads.point_loads)
        for start, end, intensity in loads.distributed_loads:
            total_vertical_load += intensity * (end - start)

        moment_sum = 0
        for position, magnitude in loads.point_loads:
            moment_sum += magnitude * (position[0] - self.roller_position[0])
        for position, moment in loads.point_moments:
            moment_sum -= moment
        for start, end, intensity in loads.distributed_loads:
            load_position = (start + end) / 2
            total_load = intensity * (end - start)
            moment_sum += total_load * (load_position - self.roller_position[0])

        R_B = moment_sum / (self.pin_position[0] - self.roller_position[0])
        R_A = total_vertical_load - R_B

        self.reactions["pin"]["vertical"] = abs(R_B)
        self.reactions["roller"]["vertical"] = abs(R_A)

        print("핀 반력 (수직): {:.4f} kN".format(self.reactions["pin"]["vertical"]))
        print("롤러 반력 (수직): {:.4f} kN".format(self.reactions["roller"]["vertical"]))


class ExternalLoads:
    def __init__(self):
        self.point_loads = []        
        self.point_moments = []      
        self.distributed_loads = []  

    def add_point_load(self, position, magnitude):
        self.point_loads.append((position, magnitude / 1000))  # kN으로 변환

    def add_point_moment(self, position, magnitude):
        self.point_moments.append((position, magnitude))  # 시계방향이 양수로 저장

    def add_distributed_load(self, start, end, intensity):
        self.distributed_loads.append((start, end, intensity / 1000))  # kN/m로 변환


class InternalForces:
    def __init__(self, beam, support, loads):
        self.beam = beam
        self.support = support
        self.loads = loads

    def shear_force(self, x):
        shear_force = 0

        if self.support.roller_position and self.support.roller_position[0] <= x:
            shear_force += self.support.reactions["roller"]["vertical"]
        if self.support.pin_position and self.support.pin_position[0] <= x:
            shear_force += self.support.reactions["pin"]["vertical"]

        for start, end, intensity in self.loads.distributed_loads:
            if start <= x:
                effective_length = min(x - start, end - start)
                shear_force += intensity * effective_length

        for position, magnitude in self.loads.point_loads:
            if position[0] <= x:
                shear_force += magnitude

        return shear_force

    def bending_moment(self, x, shear_force, consider_point_moment=True):
        bending_moment = 0

        if self.support.roller_position and self.support.roller_position[0] <= x:
            bending_moment += self.support.reactions["roller"]["vertical"] * (x - self.support.roller_position[0])
        if self.support.pin_position and self.support.pin_position[0] <= x:
            bending_moment += self.support.reactions["pin"]["vertical"] * (x - self.support.pin_position[0])

        for position, magnitude in self.loads.point_loads:
            if position[0] <= x:
                bending_moment += magnitude * (x - position[0])

        if consider_point_moment:
            for position, moment in self.loads.point_moments:
                if position[0] == x:
                    bending_moment += moment

        for start, end, intensity in self.loads.distributed_loads:
            if start <= x:
                effective_length = min(x - start, end - start)
                load_position = start + effective_length / 2
                bending_moment += intensity * effective_length * (x - load_position)

        return bending_moment


class StressTensor:
    def __init__(self, beam, internal_forces):
        self.beam = beam
        self.internal_forces = internal_forces

    def axial_stress(self, axial_force):
        if axial_force == 0:
            return 0
        area = self.beam.width * self.beam.height
        return axial_force / area

    def bending_stress(self, moment, y):
        return -(moment * y) / self.beam.I

    def shear_stress(self, shear_force, y, z):
        Q = (self.beam.width / 2) * ((self.beam.height**2) / 4 - y**2)
        b = self.beam.width if -self.beam.height / 2 < y < self.beam.height / 2 else 0
        if b == 0:
            return 0
        return shear_force * Q / (self.beam.I * b)

    def stress_tensor(self, x, y, z, axial_force, moment, shear_force):
        sigma_xx = self.axial_stress(axial_force) + self.bending_stress(moment, y)
        tau_xy = self.shear_stress(shear_force, y, z)

        return [
            [sigma_xx, tau_xy, 0],
            [tau_xy, 0, 0],
            [0, 0, 0]
        ]

    def traction_vector(self, x, y, z, axial_force, moment, shear_force, normal_vector):
        sigma = self.stress_tensor(x, y, z, axial_force, moment, shear_force)

        traction = [
            sigma[0][0] * normal_vector[0] + sigma[0][1] * normal_vector[1] + sigma[0][2] * normal_vector[2],
            sigma[1][0] * normal_vector[0] + sigma[1][1] * normal_vector[1] + sigma[1][2] * normal_vector[2],
            sigma[2][0] * normal_vector[0] + sigma[2][1] * normal_vector[1] + sigma[2][2] * normal_vector[2]
        ]

        return traction


def main():
    length = float(input("보의 길이 (m): "))
    width = float(input("보의 너비 (mm): "))
    height = float(input("보의 높이 (mm): "))
    beam = Beam(length, width, height)

    support = Support(방긋)
    loads = ExternalLoads()

    roller_x = float(input("롤러의 x 위치 (m)를 입력하세요: "))
    support.set_roller(roller_x)

    pin_x = float(input("핀의 x 위치 (m)를 입력하세요: "))
    support.set_pin(pin_x)

    while True:
        load_type = input("추가할 외력 종류를 선택하세요 (p: point_load, m: point_moment, d: distributed_load, 종료하려면 'exit'): ")
        
        if load_type == "p" or load_type == "point_load":
            position = float(input("점 수직 하중 위치 (x in m)를 입력하세요: "))
            magnitude = float(input("점 수직 하중 크기 (kN, 위 방향 양수 / 아래 방향 음수): ")) * 1000
            loads.add_point_load((position, 0, 0), magnitude)
        
        elif load_type == "m" or load_type == "point_moment":
            position = float(input("점 모멘트 하중 위치 (x in m)를 입력하세요: "))
            magnitude = float(input("점 모멘트 하중 크기 (kN*m, 시계방향 양수 / 반시계방향 음수): "))
            loads.add_point_moment((position, 0, 0), magnitude)
        
        elif load_type == "d" or load_type == "distributed_load":
            start_position = float(input("연속 수직 하중 시작 위치 (x in m)를 입력하세요: "))
            end_position = float(input("연속 수직 하중 끝 위치 (x in m)를 입력하세요: "))
            intensity = float(input("연속 수직 하중 세기 (kN/m, 위 방향 양수 / 아래 방향 음수): ")) * 1000
            loads.add_distributed_load(start_position, end_position, intensity)
        
        elif load_type == "exit":
            break
        else:
            print("올바른 외력 종류를 입력하세요. (p, m, d 중 선택)")

    support.calculate_reactions(loads)
    
    internal_forces = InternalForces(beam, support, loads)
    stress_tensor_calculator = StressTensor(beam, internal_forces)

    position_input = input("내력을 계산할 위치 (x, y, z)를 입력하세요 (예: 1.5, 50, 30): ")
    x_position, y_position, z_position = map(float, position_input.split(","))
    y_position /= 1000  # mm to m
    z_position /= 1000  # mm to m

    delta = 1e-5
    shear_left = internal_forces.shear_force(x_position - delta)
    shear_right = internal_forces.shear_force(x_position + delta)

    moment_left = internal_forces.bending_moment(x_position, shear_left, consider_point_moment=False)
    moment_right = internal_forces.bending_moment(x_position, shear_right, consider_point_moment=True)

    print(f"\n위치 x = {x_position:.4f} m에서 좌극한 전단력: {shear_left:.4f} kN, 우극한 전단력: {shear_right:.4f} kN")
    print(f"좌극한 전단력에서 굽힘 모멘트: {moment_left:.4f} kN*m")
    print(f"우극한 전단력에서 굽힘 모멘트: {moment_right:.4f} kN*m")

    if abs(shear_left) > abs(shear_right):
        chosen_shear = shear_left
        chosen_moment = moment_left
        chosen_side = "좌극한"
    else:
        chosen_shear = shear_right
        chosen_moment = moment_right
        chosen_side = "우극한"

    print(f"\n선택된 전단력 ({chosen_side}): {chosen_shear:.4f} kN")
    print(f"선택된 전단력을 사용한 굽힘 모멘트: {chosen_moment:.4f} kN*m")

    tensor = stress_tensor_calculator.stress_tensor(x_position, y_position, z_position, 0, chosen_moment, chosen_shear)
    print("응력 텐서:")
    for row in tensor:
        print(["{:.4f}".format(cell) for cell in row])

if __name__ == "__main__":
    main()
