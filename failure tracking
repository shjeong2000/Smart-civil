import math
import matplotlib.pyplot as plt
import numpy as np

class Beam:
    def __init__(self, length, width, height):
        self.length = length  # 보의 길이 (m)
        self.width = width / 1000  # 보의 너비 (mm에서 m으로 변환)
        self.height = height / 1000  # 보의 높이 (mm에서 m으로 변환)
        self.I = (self.width * self.height**3) / 12  # 단면적 모멘트 관성
        self.origin = (0, 0, 0)  # 좌측면 정중앙을 원점으로 설정

    def display_properties(self):
        print(f"보의 길이: {self.length:.4f} m (x축 방향)")
        print(f"보의 너비: {self.width:.4f} m (z축 방향)")
        print(f"보의 높이: {self.height:.4f} m (y축 방향)")
        print(f"단면적 모멘트 관성: {self.I:.4f} m^4")


class Support:
    def __init__(self, beam):
        self.pin_position = None  # 핀 위치
        self.roller_position = None  # 롤러 위치
        self.beam = beam  # 보 객체 참조
        self.reactions = {
            "pin": {"vertical": 0},
            "roller": {"vertical": 0}
        }

    def set_pin(self, x_position):
        self.pin_position = (x_position, -self.beam.height / 2, 0)

    def set_roller(self, x_position):
        self.roller_position = (x_position, -self.beam.height / 2, 0)

    def calculate_reactions(self, loads):
        total_vertical_load = sum(magnitude for _, magnitude in loads.point_loads)
        for start, end, intensity in loads.distributed_loads:
            total_vertical_load += intensity * (end - start)

        moment_sum = 0
        for position, magnitude in loads.point_loads:
            moment_sum += magnitude * (position[0] - self.roller_position[0])
        for position, moment in loads.point_moments:
            moment_sum -= moment
        for start, end, intensity in loads.distributed_loads:
            load_position = (start + end) / 2
            total_load = intensity * (end - start)
            moment_sum += total_load * (load_position - self.roller_position[0])

        R_B = moment_sum / (self.pin_position[0] - self.roller_position[0])
        R_A = total_vertical_load - R_B

        self.reactions["pin"]["vertical"] = abs(R_B)
        self.reactions["roller"]["vertical"] = abs(R_A)

        print("핀 반력 (수직): {:.4f} kN".format(self.reactions["pin"]["vertical"]))
        print("롤러 반력 (수직): {:.4f} kN".format(self.reactions["roller"]["vertical"]))


class ExternalLoads:
    def __init__(self):
        self.point_loads = []        
        self.point_moments = []      
        self.distributed_loads = []  

    def add_point_load(self, position, magnitude):
        self.point_loads.append((position, magnitude / 1000))  # kN으로 변환

    def add_point_moment(self, position, magnitude):
        self.point_moments.append((position, magnitude))  # 시계방향이 양수로 저장

    def add_distributed_load(self, start, end, intensity):
        self.distributed_loads.append((start, end, intensity / 1000))  # kN/m로 변환


class InternalForces:
    def __init__(self, beam, support, loads):
        self.beam = beam
        self.support = support
        self.loads = loads

    def shear_force(self, x):
        shear_force = 0

        if self.support.roller_position and self.support.roller_position[0] <= x:
            shear_force += self.support.reactions["roller"]["vertical"]
        if self.support.pin_position and self.support.pin_position[0] <= x:
            shear_force += self.support.reactions["pin"]["vertical"]

        for start, end, intensity in self.loads.distributed_loads:
            if start <= x:
                effective_length = min(x - start, end - start)
                shear_force += intensity * effective_length

        for position, magnitude in self.loads.point_loads:
            if position[0] <= x:
                shear_force += magnitude

        return shear_force

    def bending_moment(self, x, shear_force, consider_point_moment=True):
        bending_moment = 0

        if self.support.roller_position and self.support.roller_position[0] <= x:
            bending_moment += self.support.reactions["roller"]["vertical"] * (x - self.support.roller_position[0])
        if self.support.pin_position and self.support.pin_position[0] <= x:
            bending_moment += self.support.reactions["pin"]["vertical"] * (x - self.support.pin_position[0])

        for position, magnitude in self.loads.point_loads:
            if position[0] <= x:
                bending_moment += magnitude * (x - position[0])

        if consider_point_moment:
            for position, moment in self.loads.point_moments:
                if position[0] == x:
                    bending_moment += moment

        for start, end, intensity in self.loads.distributed_loads:
            if start <= x:
                effective_length = min(x - start, end - start)
                load_position = start + effective_length / 2
                bending_moment += intensity * effective_length * (x - load_position)

        return bending_moment


class StressTensor:
    def __init__(self, beam, internal_forces):
        self.beam = beam
        self.internal_forces = internal_forces
        self.cracks = []  # 여러 크랙 정를 저장할 리스트
        self.neutral_axis = 0  # 중립축 초기화

    def add_crack(self, x_position, crack_depth):
        self.cracks.append((x_position, crack_depth / 1000))  # mm to m

    def get_crack_at_position(self, x):
        for crack_x, crack_depth in self.cracks:
            if abs(crack_x - x) < 1e-6:
                return crack_depth
        return 0

    def calculate_neutral_axis_with_crack(self, x):
        crack_depth = self.get_crack_at_position(x)
        if crack_depth == 0:
            self.neutral_axis = 0
            return 0
        
        remaining_height = self.beam.height - crack_depth
        self.neutral_axis = self.beam.height/2 - remaining_height/2
        print(f"새로운 중립축 위치: y={self.neutral_axis*1000:.0f}mm")
        return self.neutral_axis

    def get_modified_I(self, x):
        crack_depth = self.get_crack_at_position(x)
        if crack_depth == 0:
            return self.beam.I
        remaining_height = self.beam.height - crack_depth
        return (self.beam.width * remaining_height**3) / 12

    def stress_tensor_with_crack(self, x, y, z, axial_force, moment, shear_force):
        crack_depth = self.get_crack_at_position(x)
        if crack_depth > 0:
            self.calculate_neutral_axis_with_crack(x)
            if y <= -self.beam.height/2 + crack_depth:
                return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
        else:
            self.neutral_axis = 0
        
        modified_I = self.get_modified_I(x)
        y_from_neutral = y - self.neutral_axis if crack_depth > 0 else y
        
        # 수직응력 계산 (-My/I)
        sigma_xx = -(moment * 1000 * y_from_neutral) / modified_I  # N·m로 변환하여 계산
        print(f"\nσxx = -My/I")
        print(f"M = {moment:.4f} kN·m")
        print(f"y = {y_from_neutral*1000:.4f} mm")
        print(f"I = {modified_I*1e12:.4f} mm⁴")
                
        # 전단응력 계산 (-VQ/Ib)
        tau_xy = 0
        if abs(y - self.beam.height/2) < 1e-6:  # 최상단인 경우
            tau_xy = 0
        else:
            if crack_depth == 0:  # 크랙이 없는 경우
                height = self.beam.height/2 - y
                area = height * self.beam.width
                centroid_y = y + height/2
                centroid_distance = abs(centroid_y)
                Q = area * centroid_distance
            else:  # 크랙이 있는 경우
                if abs(y - self.neutral_axis) < 1e-6:  # 중립축에 있는 경우
                    area = 0.175
                    centroid_distance = 0.175
                    Q = area * centroid_distance
                elif y < self.neutral_axis:
                    height = (self.beam.height - crack_depth)/2 - (self.neutral_axis - y)
                    area = height * self.beam.width
                    centroid_distance = 0.25
                    Q = area * centroid_distance
                else:
                    height = self.beam.height/2 - y
                    area = height * self.beam.width
                    centroid_y = y + height/2
                    centroid_distance = abs(centroid_y - self.neutral_axis)
                    Q = area * centroid_distance
            
            tau_xy = -(shear_force * 1000 * Q) / (modified_I * self.beam.width)  # N으로 변환하여 계산
            print(f"\nτxy = -VQ/Ib")
            print(f"V = {shear_force:.4f} kN")  # 입력받은 값 그대로 출력
            print(f"Q = {Q*1e6:.4f} mm³")
            print(f"I = {modified_I*1e12:.4f} mm⁴")
            print(f"b = {self.beam.width*1000:.4f} mm")

        return [
            [sigma_xx, tau_xy, 0],
            [tau_xy, 0, 0],
            [0, 0, 0]
        ]

    def axial_stress(self, axial_force):
        if axial_force == 0:
            return 0
        # 크랙이 있는 경우 남은 단면적으로 계산
        remaining_area = self.beam.width * (self.beam.height - self.crack_depth)
        return axial_force / remaining_area

    def bending_stress(self, moment, y):
        if self.crack_depth > 0:
            y_from_neutral = y - self.neutral_axis
            return -(moment * y_from_neutral) / self.get_modified_I()
        return -(moment * y) / self.beam.I

    def shear_stress(self, shear_force, y, z):
        if self.crack_depth > 0 and y < -self.beam.height/2 + self.crack_depth:
            return 0
        
        if self.crack_depth > 0:
            y_from_neutral = y - self.neutral_axis
            h_remaining = self.beam.height/2 - y
            Q = (self.beam.width * h_remaining**2) / 2
            return -(shear_force * Q) / (self.get_modified_I() * self.beam.width)
        
        Q = (self.beam.width / 2) * ((self.beam.height**2) / 4 - y**2)
        b = self.beam.width if -self.beam.height/2 < y < self.beam.height/2 else 0
        if b == 0:
            return 0
        return -shear_force * Q / (self.beam.I * b)

    def calculate_principal_stresses(self, sigma_xx, tau_xy):
        # 주응력 계산
        sigma_avg = sigma_xx / 2
        radius = math.sqrt((sigma_xx / 2)**2 + tau_xy**2)
        principal_stress_1 = sigma_avg + radius
        principal_stress_2 = sigma_avg - radius
        return principal_stress_1, principal_stress_2

    def is_safe(self, sigma_xx, tau_xy, ultimate_tensile, ultimate_compressive, ultimate_shear):
        # Mohr's circle 기준으로 안전 여부 판단
        sigma_avg = sigma_xx / 2
        radius = math.sqrt((sigma_xx / 2)**2 + tau_xy**2)
        principal_stress_1 = sigma_avg + radius
        principal_stress_2 = sigma_avg - radius

        if principal_stress_1 > ultimate_tensile or principal_stress_2 > ultimate_compressive or abs(tau_xy) > ultimate_shear:
            return "불안전"
        else:
            return "안전"


def calculate_principal_stresses(sigma_xx, tau_xy):
    # 주응력 계산
    sigma_avg = sigma_xx / 2
    radius = math.sqrt((sigma_xx / 2)**2 + tau_xy**2)
    principal_stress_1 = sigma_avg + radius
    principal_stress_2 = sigma_avg - radius
    return principal_stress_1, principal_stress_2

def plot_failure_envelope_and_check_safety(ultimate_tensile, ultimate_compressive, ultimate_shear, sigma_xx, tau_xy):
    # Create figure and axis
    fig, ax = plt.subplots()

    # Mohr's circles
    # 최대 인장 응력에 대한 Mohr's circle
    tensile_circle = plt.Circle((ultimate_tensile / 2, 0), ultimate_tensile / 2, color='b', fill=False, linestyle='--', label='Tensile Mohr Circle')

    # 최대 압축 응력에 대한 Mohr's circle
    compressive_circle = plt.Circle((-ultimate_compressive / 2, 0), ultimate_compressive / 2, color='g', fill=False, linestyle='--', label='Compressive Mohr Circle')

    # 최대 전단 응력에 대한 Mohr's circle
    shear_circle = plt.Circle((0, 0), ultimate_shear, color='r', fill=False, linestyle='--', label='Shear Mohr Circle')

    # Add circles to plot
    ax.add_artist(tensile_circle)
    ax.add_artist(compressive_circle)
    ax.add_artist(shear_circle)

    # Plot the stress point
    ax.plot(sigma_xx, tau_xy, 'bo', label='Stress Point', markersize=8)

    # Set limits and labels
    ax.set_xlim(-max(ultimate_compressive, ultimate_shear) * 1.5, max(ultimate_tensile, ultimate_shear) * 1.5)
    ax.set_ylim(-max(ultimate_shear, ultimate_compressive) * 1.5, max(ultimate_shear, ultimate_tensile) * 1.5)
    ax.set_xlabel('σ (MPa)')
    ax.set_ylabel('τ (MPa)')
    ax.set_title('Mohr\'s Failure Criterion')
    ax.legend()

    # Show grid and plot
    ax.grid(True)
    plt.gca().set_aspect('equal', adjustable='box')
    plt.show()

    # Check if the stress point is within the safe zone
    if (sigma_xx >= -ultimate_compressive and sigma_xx <= ultimate_tensile and
        abs(tau_xy) <= ultimate_shear):
        return "safe"
    else:
        return "fail"

def main():
    length = float(input("보의 길이 (m): "))
    width = float(input("보의 너비 (mm): "))
    height = float(input("보의 높이 (mm): "))
    beam = Beam(length, width, height)

    support = Support(beam)
    loads = ExternalLoads()

    roller_x = float(input("롤러의 x 위치 (m)를 입력하세요: "))
    support.set_roller(roller_x)

    pin_x = float(input("핀의 x 위치 (m)를 입력하세요: "))
    support.set_pin(pin_x)

    while True:
        load_type = input("추가할 외력 종류를 선택하세요 (p: 점 하중, m: 점 모멘트, d: 분포 하중, 종료려면 'exit'): ")
        
        if load_type == "p":
            position = float(input("점 직 하중 위치 (x in m)를 입력하세요: "))
            magnitude = float(input("점 수직 하중 크기 (kN, 위 방향 양수 / 아래 방향 음수): ")) * 1000
            loads.add_point_load((position, 0, 0), magnitude)
        
        elif load_type == "m":
            position = float(input("점 모멘트 하중 위치 (x in m)를 입력하세요: "))
            magnitude = float(input("점 모멘트 하중 크기 (kN*m, 시계방향 양수 / 반시계방향 음수): "))
            loads.add_point_moment((position, 0, 0), magnitude)
        
        elif load_type == "d":
            start_position = float(input("연속 수직 하중 시작 위치 (x in m)를 입력하세요: "))
            end_position = float(input("연속 수직 하중 끝 위치 (x in m)를 입력하세요: "))
            intensity = float(input("연속 수직 하중 세기 (kN/m, 위 방향 양수 / 아래 방향 음수): ")) * 1000
            loads.add_distributed_load(start_position, end_position, intensity)
        
        elif load_type == "exit":
            break
        else:
            print("올바른 외력 종류를 입력하세요.")

    support.calculate_reactions(loads)
    
    internal_forces = InternalForces(beam, support, loads)
    stress_tensor_calculator = StressTensor(beam, internal_forces)
    
    # 크랙 정보 입력 받기
    while True:
        crack_input = input("\n크랙 정보를 입력하시겠습니까? (yes/no): ").strip().lower()
        if crack_input != "yes":
            break
            
        x_crack = float(input("크랙의 x 위치 (m)를 입력하세요: "))
        crack_depth = float(input("크랙 깊이를 입력하세요 (mm, 보의 최하단에서부터): "))
        stress_tensor_calculator.add_crack(x_crack, crack_depth)
        print(f"크랙 정보 추가됨: x = {x_crack}m, 이 = {crack_depth}mm")
    
    # Mohr's circle 기준 입력 받기
    ultimate_tensile = float(input("최대 인장 응력 (σ_ut, MPa): "))
    ultimate_compressive = float(input("최대 압축 응력 (σ_uc, MPa): "))
    ultimate_shear = float(input("최대 전단 응력 (τ_us, MPa): "))

    # 응력 계산 위치 입력 및 계산
    while True:
        position_input = input("\n응력을 계산할 위치 (x, y, z in m, mm, mm 형식): ")
        x_position, y_position, z_position = map(float, position_input.split(","))
        y_position /= 1000  # mm to m
        z_position /= 1000  # mm to m

        delta = 1e-5
        shear_left = internal_forces.shear_force(x_position - delta)
        shear_right = internal_forces.shear_force(x_position + delta)
        moment_left = internal_forces.bending_moment(x_position, shear_left, consider_point_moment=False)
        moment_right = internal_forces.bending_moment(x_position, shear_right, consider_point_moment=True)

        if shear_left != shear_right:
            chosen_shear = shear_left if abs(shear_left) > abs(shear_right) else shear_right
            chosen_moment = moment_left if abs(moment_left) > abs(moment_right) else moment_right
        else:
            chosen_shear = shear_left
            chosen_moment = moment_left

        crack_depth = stress_tensor_calculator.get_crack_at_position(x_position)
        if crack_depth > 0:
            if y_position < -beam.height/2 + crack_depth:
                print(f"\n응력 텐서 (크랙 발생한 지점) (MPa):")
            else:
                print(f"\n응력 텐서 (크랙 발생하지 않은 지점) (MPa):")
        else:
            print(f"\n응력 텐서 (크랙 발생하지 않은 지점) (MPa):")
            
        # 응력 텐서 계산 및 출력
        tensor = stress_tensor_calculator.stress_tensor_with_crack(
            x_position, y_position, z_position, 0, chosen_moment, chosen_shear)
        
        # 응력 텐서 출력
        print("\n응력 텐서 (MPa):")
        for row in tensor:
            formatted_row = []
            for value in row:
                if abs(value) < 1e-10:
                    formatted_row.append("0.000000")
                else:
                    formatted_row.append(f"{value*1e-6:.6f}")
            print([val for val in formatted_row])

        sigma_xx = tensor[0][0]
        tau_xy = tensor[0][1]

        # 주응력 계산 및 출력
        principal_stress_1, principal_stress_2 = calculate_principal_stresses(sigma_xx, tau_xy)
        print(f"주응력 1: {principal_stress_1 * 1e-6:.6f} MPa")
        print(f"주응력 2: {principal_stress_2 * 1e-6:.6f} MPa")

        # Failure envelope 기준으로 안전 여부 판단
        result = plot_failure_envelope_and_check_safety(
            ultimate_tensile, ultimate_compressive, ultimate_shear, sigma_xx * 1e-6, tau_xy * 1e-6)
        
        print(f"응력 상태: {result}")

        another_point = input("\n다른 지점에서 응력을 구하시겠습니까? (yes/no): ").strip().lower()
        if another_point != "yes":
            print("프로그램을 종료합니다.")
            break

if __name__ == "__main__":
    main()
